// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using yemekAPI.Models;

#nullable disable

namespace yemekAPI.Migrations
{
    [DbContext(typeof(YemekAPIContext))]
    partial class YemekAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("yemekAPI.Models.Adress", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdresId"));

                    b.Property<string>("EvAdresi")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IsAdresi")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdresId");

                    b.ToTable("Adresses");
                });

            modelBuilder.Entity("yemekAPI.Models.Kategoriler", b =>
                {
                    b.Property<int>("KategoriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategoriId"));

                    b.Property<string>("KategoriTuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("KategoriId");

                    b.ToTable("Kategorilers");
                });

            modelBuilder.Entity("yemekAPI.Models.Kullanıcı", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AdresId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("AdresId")
                        .IsUnique();

                    b.ToTable("Kullanıcıs");
                });

            modelBuilder.Entity("yemekAPI.Models.Menüler", b =>
                {
                    b.Property<int?>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("MenuId"));

                    b.Property<int>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.HasIndex("UrunId")
                        .IsUnique();

                    b.ToTable("Menülers");
                });

            modelBuilder.Entity("yemekAPI.Models.RestMenüsü", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId");

                    b.HasIndex("MenuId")
                        .IsUnique()
                        .HasFilter("[MenuId] IS NOT NULL");

                    b.ToTable("restMenüsüs");
                });

            modelBuilder.Entity("yemekAPI.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("KategoriId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RestaurantId");

                    b.HasIndex("KategoriId")
                        .IsUnique();

                    b.ToTable("restaurants");
                });

            modelBuilder.Entity("yemekAPI.Models.Sepet", b =>
                {
                    b.Property<int>("SepetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SepetId"));

                    b.Property<int>("Tutar")
                        .HasColumnType("int");

                    b.Property<int>("UrunAdet")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SepetId");

                    b.HasIndex("UserId");

                    b.ToTable("Sepets");
                });

            modelBuilder.Entity("yemekAPI.Models.SepetUrun", b =>
                {
                    b.Property<int>("SepetId")
                        .HasColumnType("int");

                    b.Property<int?>("UrunId")
                        .HasColumnType("int");

                    b.HasKey("SepetId");

                    b.HasIndex("UrunId")
                        .IsUnique()
                        .HasFilter("[UrunId] IS NOT NULL");

                    b.ToTable("sepetUruns");
                });

            modelBuilder.Entity("yemekAPI.Models.Siparisler", b =>
                {
                    b.Property<int>("SiparisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiparisId"));

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("SiparisAdet")
                        .HasColumnType("int");

                    b.Property<DateTime>("SiparisTarih")
                        .HasColumnType("datetime2");

                    b.Property<int>("SiparisTutar")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SiparisId");

                    b.HasIndex("RestaurantId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Siparislers");
                });

            modelBuilder.Entity("yemekAPI.Models.Ürünler", b =>
                {
                    b.Property<int>("UrunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrunId"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Fiyat")
                        .HasColumnType("int");

                    b.HasKey("UrunId");

                    b.ToTable("Ürünlers");
                });

            modelBuilder.Entity("yemekAPI.Models.Kullanıcı", b =>
                {
                    b.HasOne("yemekAPI.Models.Adress", "Adress")
                        .WithOne("Kullanıcı")
                        .HasForeignKey("yemekAPI.Models.Kullanıcı", "AdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("yemekAPI.Models.Menüler", b =>
                {
                    b.HasOne("yemekAPI.Models.Ürünler", "Ürünler")
                        .WithOne("Menüler")
                        .HasForeignKey("yemekAPI.Models.Menüler", "UrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ürünler");
                });

            modelBuilder.Entity("yemekAPI.Models.RestMenüsü", b =>
                {
                    b.HasOne("yemekAPI.Models.Menüler", "Menüler")
                        .WithOne("RestMenüsü")
                        .HasForeignKey("yemekAPI.Models.RestMenüsü", "MenuId");

                    b.HasOne("yemekAPI.Models.Restaurant", "Restaurant")
                        .WithOne("RestMenüsü")
                        .HasForeignKey("yemekAPI.Models.RestMenüsü", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menüler");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("yemekAPI.Models.Restaurant", b =>
                {
                    b.HasOne("yemekAPI.Models.Kategoriler", "Kategoriler")
                        .WithOne("Restaurant")
                        .HasForeignKey("yemekAPI.Models.Restaurant", "KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategoriler");
                });

            modelBuilder.Entity("yemekAPI.Models.Sepet", b =>
                {
                    b.HasOne("yemekAPI.Models.Kullanıcı", "Kullanıcı")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanıcı");
                });

            modelBuilder.Entity("yemekAPI.Models.SepetUrun", b =>
                {
                    b.HasOne("yemekAPI.Models.Sepet", "Sepet")
                        .WithOne("SepetUrun")
                        .HasForeignKey("yemekAPI.Models.SepetUrun", "SepetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yemekAPI.Models.Ürünler", "Ürünler")
                        .WithOne("SepetUrun")
                        .HasForeignKey("yemekAPI.Models.SepetUrun", "UrunId");

                    b.Navigation("Sepet");

                    b.Navigation("Ürünler");
                });

            modelBuilder.Entity("yemekAPI.Models.Siparisler", b =>
                {
                    b.HasOne("yemekAPI.Models.Restaurant", "Restaurant")
                        .WithOne("Siparisler")
                        .HasForeignKey("yemekAPI.Models.Siparisler", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("yemekAPI.Models.Kullanıcı", "Kullanıcı")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kullanıcı");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("yemekAPI.Models.Adress", b =>
                {
                    b.Navigation("Kullanıcı")
                        .IsRequired();
                });

            modelBuilder.Entity("yemekAPI.Models.Kategoriler", b =>
                {
                    b.Navigation("Restaurant")
                        .IsRequired();
                });

            modelBuilder.Entity("yemekAPI.Models.Menüler", b =>
                {
                    b.Navigation("RestMenüsü")
                        .IsRequired();
                });

            modelBuilder.Entity("yemekAPI.Models.Restaurant", b =>
                {
                    b.Navigation("RestMenüsü")
                        .IsRequired();

                    b.Navigation("Siparisler")
                        .IsRequired();
                });

            modelBuilder.Entity("yemekAPI.Models.Sepet", b =>
                {
                    b.Navigation("SepetUrun")
                        .IsRequired();
                });

            modelBuilder.Entity("yemekAPI.Models.Ürünler", b =>
                {
                    b.Navigation("Menüler")
                        .IsRequired();

                    b.Navigation("SepetUrun")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
